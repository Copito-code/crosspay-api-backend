"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url # Nuevo: Para configurar PostgreSQL con una URL



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Hosts permitidos (Render/Railway te darán la URL final)
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'tu-app-de-render.onrender.com', 'tu-app-de-railway.app']

# En producción, permitimos todos los subdominios y la URL principal.
if not DEBUG:
    ALLOWED_HOSTS += config('ALLOWED_HOSTS', default='').split(',')





# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Para la api Rest 
    'corsheaders',    # Para permitir la comunicación con React
    'transactions',   # Nuestra aplicación de transacciones'
    'rest_framework_simplejwt', # Autenticación
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware', # 1
    'django.middleware.security.SecurityMiddleware', # 2
    'django.contrib.sessions.middleware.SessionMiddleware', # 3 
    'django.middleware.common.CommonMiddleware', # 4
    'django.middleware.csrf.CsrfViewMiddleware', # 5
    'django.contrib.auth.middleware.AuthenticationMiddleware', #6 
    'django.contrib.messages.middleware.MessageMiddleware', # 7
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # 8
    
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///db.sqlite3',
        cast=dj_database_url.parse
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/



STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Habilitar compresión de archivos estáticos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'




# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'






# Configuración de Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Usa JWT en lugar de SessionAuthentication
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
         # Asegura que el acceso es privado por defecto
        'rest_framework.permissions.IsAuthenticated',
    ]
}



# Esto le dice a Django que confíe en los orígenes que envían la cookie CSRF.
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173', 
    'http://127.0.0.1:5173',
]

# Orígenes de CORS (Para GET y POST)
CORS_ORIGIN_WHITELIST = [
    'http://localhost:5173', 
    'http://127.0.0.1:5173',
]




# CORS Configuration
# La variable de entorno `CORS_ALLOWED_ORIGINS` se usará en producción.
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:3000').split(',')
CORS_ALLOW_CREDENTIALS = True 




SESSION_COOKIE_DOMAIN = 'localhost' 

# MUY IMPORTANTE: Asegúrate de que ALLOWED_HOSTS incluya 'localhost' y '127.0.0.1'
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

SESSION_COOKIE_SAMESITE = None 
SESSION_COOKIE_SECURE = False  
CSRF_COOKIE_SECURE = False   
CSRF_COOKIE_HTTPONLY = False


CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken', # Crucial para el login
    'x-requested-with',
]